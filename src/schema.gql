# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Comment {
  _id: String!
  authorId: String!
  contents: String!
  createdAt: DateTime!
  postId: String!
  published: Boolean!
  updatedAt: DateTime!
}

input CreateCommentInput {
  contents: String!
  postId: String!
  published: Boolean!
}

input CreatePostInput {
  contents: String!
  published: Boolean!
  title: String!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  role: Role! = MEMBER
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createPost(createPostInput: CreatePostInput!): Post!
  createUser(createUserInput: CreateUserInput!): User!
  deleteComment(commentId: String!, postId: String!): Comment!
  deletePost(postId: String!): Post!
  deleteUser(userId: String!): User!
  login(loginInput: LoginInput!): TokenResponse!
  signup(signupInput: CreateUserInput!): TokenResponse!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  updatePost(updatePostInput: UpdatePostInput!): Post!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type PaginateCommentOutput {
  docs: [Comment!]!
  limit: Float!
  offset: Float!
  total: Float!
}

type PaginatePostOutput {
  docs: [Post!]!
  limit: Float!
  offset: Float!
  total: Float!
}

type PaginateUsersOutput {
  docs: [User!]!
  limit: Float!
  offset: Float!
  total: Float!
}

type Post {
  _id: String!
  author: User
  authorId: String!
  comments: [Comment!]
  commentsWithLoader: [Comment!]!
  commentsWithoutLoader: [Comment!]!
  contents: String!
  createdAt: DateTime!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

type Query {
  getPostsForLoaderTest(limit: Float!): [Post!]!
  paginateComments(readCommentInput: ReadCommentInput!): PaginateCommentOutput!
  paginatePosts(readPostInput: ReadPostInput!): PaginatePostOutput!
  paginateUsers(readUserInput: ReadUserInput!): PaginateUsersOutput!
}

input ReadCommentInput {
  _id: String
  authorId: String
  limit: Int! = 10
  offset: Int! = 0
  postId: String
  published: Boolean
  sortBy: String! = "createdAt"
  sortOrder: String! = "desc"
}

input ReadPostInput {
  _id: String
  authorId: String
  limit: Int! = 10
  offset: Int! = 0
  published: Boolean
  sortBy: String! = "createdAt"
  sortOrder: String! = "desc"
}

input ReadUserInput {
  _id: String
  limit: Int! = 10
  offset: Int! = 0
  role: String
  sortBy: String! = "createdAt"
  sortOrder: String! = "desc"
}

enum Role {
  ADMIN
  MEMBER
}

type TokenResponse {
  accessToken: String!
}

input UpdateCommentInput {
  commentId: String!
  contents: String!
  postId: String!
  published: Boolean!
}

input UpdatePostInput {
  contents: String!
  postId: String!
  published: Boolean!
  title: String!
}

input UpdateUserInput {
  _id: String!
  name: String!
  password: String!
}

type User {
  _id: String!
  createdAt: DateTime!
  email: String!
  name: String!
  posts: [Post!]
  role: Role!
  updatedAt: DateTime!
}