# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Comment {
  _id: String!
  authorId: String!
  contents: String!
  createdAt: DateTime!
  postId: String!
  published: Boolean!
  updatedAt: DateTime!
}

input CreatePostInput {
  contents: String!
  published: Boolean!
  title: String!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  role: Role! = MEMBER
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createPost(createPostInput: CreatePostInput!): PostOutput!
  createUser(createUserInput: CreateUserInput!): UserOutput!
  deletePost(PostId: String!): PostOutput!
  deleteUser(userId: String!): UserOutput!
  updatePost(updatePostInput: UpdatePostInput!): PostOutput!
  updateUser(updateUserInput: UpdateUserInput!): UserOutput!
}

type PaginatePostOutput {
  docs: [PostOutput!]!
  limit: Float!
  offset: Float!
  total: Float!
}

type PaginateUsersOutput {
  docs: [UserOutput!]!
  limit: Float!
  offset: Float!
  total: Float!
}

type Post {
  _id: String!
  author: User
  authorId: String!
  comments: [Comment!]
  contents: String!
  createdAt: DateTime!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

type PostOutput {
  _id: String!
  authorId: String!
  contents: String!
  createdAt: String!
  published: Boolean!
  title: String!
  updatedAt: String!
}

type Query {
  paginatePosts(readPostInput: ReadPostInput!): PaginatePostOutput!
  paginateUsers(readUserInput: ReadUserInput!): PaginateUsersOutput!
}

input ReadPostInput {
  _id: String
  authorId: String
  limit: Int! = 10
  offset: Int! = 0
  published: Boolean
  sortBy: String! = "createdAt"
  sortOrder: String! = "desc"
}

input ReadUserInput {
  _id: String
  limit: Int! = 10
  offset: Int! = 0
  role: String
  sortBy: String! = "createdAt"
  sortOrder: String! = "desc"
}

enum Role {
  ADMIN
  MEMBER
}

input UpdatePostInput {
  contents: String!
  postId: String!
  published: Boolean!
  title: String!
}

input UpdateUserInput {
  _id: String!
  name: String!
  password: String!
  role: String!
}

type User {
  _id: String!
  createdAt: DateTime!
  email: String!
  name: String!
  posts: [Post!]
  role: Role!
  updatedAt: DateTime!
}

type UserOutput {
  _id: String!
  createdAt: String!
  email: String!
  name: String!
  posts: [Post!]
  role: Role!
  updatedAt: String!
}