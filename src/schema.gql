# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CommentOutput {
  _id: String!
  authorId: String!
  contents: String!
  createdAt: String!
  postId: String!
  published: Boolean!
  updatedAt: String!
}

input CreateCommentInput {
  contents: String!
  postId: String!
  published: Boolean!
}

input CreatePostInput {
  contents: String!
  published: Boolean!
  title: String!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  role: Role! = MEMBER
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createComment(createCommentInput: CreateCommentInput!): CommentOutput!
  createPost(createPostInput: CreatePostInput!): PostOutput!
  createUser(createUserInput: CreateUserInput!): UserOutput!
  deleteComment(commentId: String!, postId: String!): CommentOutput!
  deletePost(postId: String!): PostOutput!
  deleteUser(userId: String!): UserOutput!
  login(loginInput: LoginInput!): TokenOutput!
  signup(signupInput: SignupInput!): TokenOutput!
  updateComment(updateCommentInput: UpdateCommentInput!): CommentOutput!
  updatePost(updatePostInput: UpdatePostInput!): PostOutput!
  updateUser(updateUserInput: UpdateUserInput!): UserOutput!
}

type PaginateCommentOutput {
  docs: [CommentOutput!]!
  limit: Float!
  offset: Float!
  total: Float!
}

type PaginatePostOutput {
  docs: [PostOutput!]!
  limit: Float!
  offset: Float!
  total: Float!
}

type PaginateUsersOutput {
  docs: [UserOutput!]!
  limit: Float!
  offset: Float!
  total: Float!
}

type PostOutput {
  _id: String!
  authorId: String!
  contents: String!
  createdAt: String!
  published: Boolean!
  title: String!
  updatedAt: String!
}

type Query {
  paginateComments(readCommentInput: ReadCommentInput!): PaginateCommentOutput!
  paginatePosts(readPostInput: ReadPostInput!): PaginatePostOutput!
  paginateUsers(readUserInput: ReadUserInput!): PaginateUsersOutput!
}

input ReadCommentInput {
  _id: String
  authorId: String
  limit: Int! = 10
  offset: Int! = 0
  postId: String
  published: Boolean
  sortBy: String! = "createdAt"
  sortOrder: String! = "desc"
}

input ReadPostInput {
  _id: String
  authorId: String
  limit: Int! = 10
  offset: Int! = 0
  published: Boolean
  sortBy: String! = "createdAt"
  sortOrder: String! = "desc"
}

input ReadUserInput {
  _id: String
  limit: Int! = 10
  offset: Int! = 0
  role: String
  sortBy: String! = "createdAt"
  sortOrder: String! = "desc"
}

enum Role {
  ADMIN
  MEMBER
}

input SignupInput {
  email: String!
  name: String!
  password: String!
  role: Role! = MEMBER
}

type TokenOutput {
  accessToken: String!
}

input UpdateCommentInput {
  commentId: String!
  contents: String!
  postId: String!
  published: Boolean!
}

input UpdatePostInput {
  contents: String!
  postId: String!
  published: Boolean!
  title: String!
}

input UpdateUserInput {
  _id: String!
  name: String!
  password: String
  role: String
}

type UserOutput {
  _id: String!
  createdAt: String!
  email: String!
  name: String!
  role: Role!
  updatedAt: String!
}